{
  "hash": "c2e398bc15c53ac8f89e314baac01026",
  "result": {
    "markdown": "---\ntitle: Simulation der Teilchenbewegung mit Julia\nfreeze: true\n---\n\nDieses Notebook demonstriert die numerische Simulation der Teilchenbewegung.\n\nWir nutzen einen ODE-Löser des Julia-Pakets *OrdinaryDiffEq*. Außerdem nutzen wir *TestParticle.jl*, ein Paket zum bequemen Berechnen der Bewegungsbahnen geladener Teilchen in Dipolfeldern.\n\nDie Visualisierung erfolgt mit *Plots.jl*.\n\n::: {.cell tags='[]' execution_count=1}\n``` {.julia .cell-code}\nusing TestParticle\nusing TestParticle: getB_dipole, getE_dipole, sph2cart, Rₑ\nusing OrdinaryDiffEq\nusing Plots\nusing Statistics\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\nfunction fieldline(ϕ::Float64, L::Float64=2.5, nP::Int=100)\n\n   xyz = [ sph2cart(L*sin(θ)^2,ϕ,θ) for θ in range(-π,stop=π,length=nP) ]\n   x = Vector{Float64}(undef,length(xyz))\n   y = Vector{Float64}(undef,length(xyz))\n   z = Vector{Float64}(undef,length(xyz))\n\n   for (i, pos) in enumerate(xyz)\n      x[i],y[i],z[i] = [pos...]\n   end\n\n   (x,y,z)\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nfieldline (generic function with 3 methods)\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\nfunction plot_iso3d(xs, ys, zs; lw=3, lc=:red, title=\"Isometric 3D plot\",label=false, camera=(45,30))\n    # condition data for nearly isometric 3D plot \n    x12, y12, z12 = extrema(xs), extrema(ys), extrema(zs)\n    d = maximum([diff([x12...]),diff([y12...]),diff([z12...])])[1] / 2\n    xm, ym, zm = mean(x12),  mean(y12),  mean(z12) \n\n    # plot data\n    p = Plots.plot(; xlabel=\"x\",ylabel=\"y\",zlabel=\"z\", aspect_ratio=:equal, grid=:true)\n    Plots.plot!(xlims=(xm-d,xm+d), ylims=(ym-d,ym+d), zlims=(zm-d,zm+d))\n    Plots.plot!(;camera=camera)    #(azimuth,elevation) ???\n    Plots.plot!(xs, ys, zs, title=title,lw=lw,lc=lc,label=label)\n    Plots.plot!(xs, ys, zlims(p)[1] .+ 0*zs, lw=1, lc=:lightgray, label=false)\n    Plots.plot!(xs, ylims(p)[2]  .+ 0*ys, zs, lw=1, lc=:lightgray, label=false)\n    Plots.plot!(xlims(p)[1]  .+ 0*xs, ys, zs, lw=1, lc=:lightgray, label=false)\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\nplot_iso3d (generic function with 1 method)\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\nEk = 5e7\n\nm = TestParticle.mᵢ\nq = TestParticle.qᵢ\nc = TestParticle.c;\n```\n:::\n\n\n::: {.cell nteract='{\"transient\":{\"deleting\":false}}' tags='[]' execution_count=5}\n``` {.julia .cell-code}\n# initial velocity, [m/s]\nv₀ = sph2cart(c*sqrt(1-1/(1+Ek*q/(m*c^2))^2), 0.0, π/4)\n# initial position, [m]\nr₀ = sph2cart(2.5*Rₑ, 0.0, π/2)\nstateinit = [r₀..., v₀...]\n# obtain field\nparam = prepare(getE_dipole, getB_dipole)\ntspan = (0.0, 20.0);\n```\n:::\n\n\n::: {.cell nteract='{\"transient\":{\"deleting\":false}}' tags='[]' execution_count=6}\n``` {.julia .cell-code}\nprob = ODEProblem(trace_analytic!, stateinit, tspan, param);\n```\n:::\n\n\n::: {.cell nteract='{\"transient\":{\"deleting\":false}}' tags='[]' execution_count=7}\n``` {.julia .cell-code}\nsol = solve(prob, Tsit5(); save_idxs=[1,2,3])\n\nx = getindex.(sol.u,1) / Rₑ\ny = getindex.(sol.u,2) / Rₑ\nz = getindex.(sol.u,3) / Rₑ;\n```\n:::\n\n\n::: {.cell execution_count=8}\n``` {.julia .cell-code}\nplot(x, y, z, aspect_ratio=:equal, legend=false)\nfor ϕ in range(0, stop=2*π, length=10)\n   plot!(fieldline(ϕ)..., color=\"red\", aspect_ratio=:equal, alpha=0.3, legend=false)\nend\n\ncurrent()\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n![](Dipolefield_Motion_files/figure-pdf/cell-9-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.julia .cell-code}\np = plot_iso3d(x, y, z, title=\"Charged particle traces\")\np\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n![](Dipolefield_Motion_files/figure-pdf/cell-10-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n",
    "supporting": [
      "Dipolefield_Motion_files\\figure-pdf"
    ],
    "filters": []
  }
}